{"version":3,"sources":["components/Error/Error.tsx","components/Loader/Loader.tsx","lib/dateUtils.ts","components/VideoList/VideoList.tsx","lib/requestUtils.ts","lib/requests.ts","components/Main/Main.tsx","components/Video/Video.tsx","components/Header/Header.tsx","Router/Router.tsx","context/QueryProvider.tsx","App/App.tsx","index.tsx"],"names":["Error","Loader","formatMoment","momentInstance","formatter","formatted","format","formatFilenameWithMoment","filename","momentTime","split","date","time","slice","replace","moment","ISO_8601","e","console","error","getMomentFromFilename","DATE_FORMATTER","TIME_FORMATTER","getFormattedDate","VideoList","data","map","videos","video","to","fetchJSON","path","a","window","fetch","res","ok","status","json","fetchVideos","Main","useQuery","isLoading","VideoPlayer","useParams","videoPath","useState","setError","handleError","useCallback","formattedDate","useMemo","dateTime","controls","muted","autoPlay","loop","onError","src","type","Header","Router","component","exact","Video","queryClient","QueryClient","QueryProvider","children","QueryClientProvider","client","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23277425.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error: React.FC = () => {\n\n  return (\n    <div>\n      <div>\n        Uh oh, I can't seem to reach the video server.\n      </div>\n      <div>\n        Are you sure it's running?\n      </div>\n    </div>\n  );\n}\n\nexport default Error;\n","import React from 'react';\n\nconst Loader: React.FC = () => {\n  return <>Loading</>\n}\n\nexport default Loader;\n","import moment, { Moment } from 'moment';\n\nconst getMomentFromFilename = (filename: string) => {\n  try {\n    const [date, fileEnding] = filename.split('_');\n\n    const time = fileEnding\n      .slice(0, -4)\n      .replace(/[hms]/g, ':')\n      .slice(0, -1);\n\n    return moment(`${date} ${time}`, moment.ISO_8601);\n  } catch (e) {\n    console.error(e);\n\n    return null;\n  }\n}\n\nconst formatMoment = (momentInstance: Moment, formatter: string) => {\n  const formatted = momentInstance.format(formatter);\n\n  return formatted === 'Invalid date' ? null : formatted;\n};\n\nconst formatFilenameWithMoment = (filename: string, formatter: string) => {\n  const momentTime = getMomentFromFilename(filename);\n\n  if (!momentTime) return null;\n\n  return formatMoment(momentTime, formatter);\n}\n\nconst DATE_FORMATTER = \"dddd, MMMM Do YYYY\";\nconst TIME_FORMATTER = \"h:mm:ss a\"\n\nexport const getFormattedDateTimeFromFilename = (filename: string) => \n  formatFilenameWithMoment(filename, `${DATE_FORMATTER}, ${TIME_FORMATTER}`);\n\nexport const getFormattedTimeFromFilename = (filename: string) => \n  formatFilenameWithMoment(filename, TIME_FORMATTER);\n\nexport const getFormattedDate = (date: string) => {\n  const momentTime = moment(date, 'YYYY-MM-DD');\n\n  return formatMoment(momentTime, DATE_FORMATTER);\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { VideoResults } from '../../lib/requests';\nimport { getFormattedDate, getFormattedTimeFromFilename } from '../../lib/dateUtils';\n\ninterface VideoListProps {\n  data: VideoResults;\n}\n\nconst VideoList: React.FC<VideoListProps> = ({ data }) => (\n  <div>\n    <h2>Videos By Date</h2>\n    <ul>\n      {data.map(({ date, videos }) => (\n        <li key={date}>\n          <ul>\n            <h3>{getFormattedDate(date)}</h3>\n            {videos.map(video => (\n              <li key={video}>\n                <Link to={`/videos/${date}/${video}`}>\n                  {getFormattedTimeFromFilename(video)}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default VideoList;\n","export const fetchJSON = async (path: string) => {\n  const res = await window.fetch(path);\n\n  if (!res.ok) {\n    throw res.status;\n  }\n\n  return res.json();\n}\n","import { fetchJSON } from \"./requestUtils\";\n\nexport interface VideoResult {\n  date: string;\n  videos: Array<string>;\n}\n\nexport type VideoResults = Array<VideoResult>;\n\nexport const fetchVideos = (): Promise<VideoResults> => fetchJSON('/api/videos');\n","import React from 'react';\nimport { useQuery } from 'react-query';\n\nimport Error from '../Error/Error';\nimport Loader from '../Loader/Loader';\nimport VideoList from '../VideoList/VideoList';\nimport { fetchVideos, VideoResults } from '../../lib/requests';\n\nconst Main: React.FC = () => {\n  const { isLoading, error, data } = useQuery<VideoResults>('videos', fetchVideos);\n\n  if (error) return <Error />\n  if (isLoading) return <Loader />\n  if (data) return <VideoList data={data} />\n  return null;\n}\n\nexport default Main;\n","import { useParams } from 'react-router-dom';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { getFormattedDateTimeFromFilename } from '../../lib/dateUtils';\n\ninterface VideoRouteParams {\n  date: string;\n  video: string;\n}\n\ninterface VideoPlayerProps {\n}\n\nconst VideoPlayer: React.FC<VideoPlayerProps> = () => {\n  const {video, date} = useParams<VideoRouteParams>();\n  const videoPath = `/api/videos/${date}/${video}`;\n  const [error, setError] = useState<boolean>(false);\n  const handleError = useCallback(() => setError(true), []);\n  const formattedDate = useMemo<null | string>(() => {\n    const dateTime = getFormattedDateTimeFromFilename(video);\n\n    if (!dateTime) setError(true);\n\n    return dateTime;\n  }, [video]);\n\n  return (\n    <div>\n      <h2>{formattedDate || video}</h2>\n      {\n        error ? (\n          <div>\n            There was an error loading the video. Are you sure the URL is correct?\n          </div>\n        ) : (\n          <video controls muted={true} autoPlay={true} loop={true} onError={handleError}>\n            <source src={videoPath} type=\"video/ogg\" />\n            <span>Uh oh, looks like video won't play.</span>\n          </video>\n        )\n      }\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface HeaderProps {\n}\n\nconst Header: React.FC<HeaderProps> = () => {\n  return (\n    <header>\n      <h1>Housecarl</h1>\n      <Link to=\"/\">Home</Link>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nimport Main from '../components/Main/Main';\nimport Video from '../components/Video/Video';\nimport Header from '../components/Header/Header';\n\nconst Router: React.FC = () => (\n  <BrowserRouter>\n    <Route path=\"*\" component={Header} />\n    <Route exact path=\"/\" component={Main} />\n    <Route path=\"/videos/:date/:video\" component={Video} />\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport {QueryClient, QueryClientProvider} from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst QueryProvider: React.FC = ({children}) => (\n  <QueryClientProvider client={queryClient}>\n    {children}\n  </QueryClientProvider>\n);\n\nexport default QueryProvider;\n","import './App.css';\nimport Router from '../Router/Router';\nimport QueryProvider from '../context/QueryProvider';\n\nfunction App() {\n  return (\n    <QueryProvider>\n      <Router />\n    </QueryProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}